// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: links.sql

package sqlc

import (
	"context"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links (
    username ,
    original_url,
    shorten_url,
    shorten_id
) VALUES (
    $1 , $2 , $3 , $4
) RETURNING id, username, original_url, shorten_url, shorten_id, click_counts, qr_counts
`

type CreateLinkParams struct {
	Username    string
	OriginalUrl string
	ShortenUrl  string
	ShortenID   string
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, createLink,
		arg.Username,
		arg.OriginalUrl,
		arg.ShortenUrl,
		arg.ShortenID,
	)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.OriginalUrl,
		&i.ShortenUrl,
		&i.ShortenID,
		&i.ClickCounts,
		&i.QrCounts,
	)
	return i, err
}

const getLinkByShortId = `-- name: GetLinkByShortId :one
SELECT id, username, original_url, shorten_url, shorten_id, click_counts, qr_counts FROM links
WHERE shorten_id = $1
ORDER BY id
`

func (q *Queries) GetLinkByShortId(ctx context.Context, shortenID string) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLinkByShortId, shortenID)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.OriginalUrl,
		&i.ShortenUrl,
		&i.ShortenID,
		&i.ClickCounts,
		&i.QrCounts,
	)
	return i, err
}

const listLinks = `-- name: ListLinks :many
SELECT id, username, original_url, shorten_url, shorten_id, click_counts, qr_counts FROM links
WHERE username = $1
ORDER BY id
`

func (q *Queries) ListLinks(ctx context.Context, username string) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, listLinks, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.OriginalUrl,
			&i.ShortenUrl,
			&i.ShortenID,
			&i.ClickCounts,
			&i.QrCounts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLink = `-- name: UpdateLink :one
UPDATE links 
SET original_url = $1 
WHERE shorten_id = $2
RETURNING id, username, original_url, shorten_url, shorten_id, click_counts, qr_counts
`

type UpdateLinkParams struct {
	OriginalUrl string
	ShortenID   string
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, updateLink, arg.OriginalUrl, arg.ShortenID)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.OriginalUrl,
		&i.ShortenUrl,
		&i.ShortenID,
		&i.ClickCounts,
		&i.QrCounts,
	)
	return i, err
}

const updateLinkClickCounts = `-- name: UpdateLinkClickCounts :one
UPDATE links 
SET  click_counts = click_counts + 1
WHERE shorten_id = $1 
RETURNING id, username, original_url, shorten_url, shorten_id, click_counts, qr_counts
`

func (q *Queries) UpdateLinkClickCounts(ctx context.Context, shortenID string) (Link, error) {
	row := q.db.QueryRowContext(ctx, updateLinkClickCounts, shortenID)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.OriginalUrl,
		&i.ShortenUrl,
		&i.ShortenID,
		&i.ClickCounts,
		&i.QrCounts,
	)
	return i, err
}

const updateLinkClickQRCounts = `-- name: UpdateLinkClickQRCounts :one
UPDATE links 
SET  qr_counts = qr_counts + 1
WHERE shorten_id = $1 
RETURNING id, username, original_url, shorten_url, shorten_id, click_counts, qr_counts
`

func (q *Queries) UpdateLinkClickQRCounts(ctx context.Context, shortenID string) (Link, error) {
	row := q.db.QueryRowContext(ctx, updateLinkClickQRCounts, shortenID)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.OriginalUrl,
		&i.ShortenUrl,
		&i.ShortenID,
		&i.ClickCounts,
		&i.QrCounts,
	)
	return i, err
}
